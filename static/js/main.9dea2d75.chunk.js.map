{"version":3,"sources":["Components/GameBoard/GameBoard.js","Components/ScoreBoard/ScoreBoard.js","App.js","serviceWorker.js","index.js"],"names":["j","ScoreBoard","props","className","roundCount","playerClickDisplay","disableScoreBoard","aria-label","onClick","startGame","randomNumArray","length","onViewRulesClick","rulesVisible","playerResponse","playerClickCounter","GameBoard","useState","redActive","setRedActive","yellowActive","setYellowActive","greenActive","setGreenActive","blueActive","setBlueActive","myOrYours","setMyOrYours","turnText","setTurnText","setPlayerClickDisplay","disableButtons","setDisableButtons","setRulesVisible","gameBoardVisible","setGameBoardVisible","setDisableScoreBoard","colorKey","0","1","2","3","gameOver","onCorrectRoundGuess","setTimeout","nextRound","displayWinningMessage","i","makeColorFlash","Math","floor","generate10randomNumbers","randomArray","push","random","handlePlayerResponse","colorNum","correctSoFar","validateAnswer","App","useEffect","document","addEventListener","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9dea2d75.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard';\nimport './GameBoard.css';\n\nlet randomNumArray = [];\nlet playerResponse = [];\nlet playerClickCounter = 0;\nlet roundCount = 0;\nlet j;\n\nexport const GameBoard = () => {\n\n  const [redActive, setRedActive] = useState(false);\n  const [yellowActive, setYellowActive] = useState(false);\n  const [greenActive, setGreenActive] = useState(false);\n  const [blueActive, setBlueActive] = useState(false);\n  const [myOrYours, setMyOrYours] = useState('');\n  const [turnText, setTurnText] = useState('');\n  const [playerClickDisplay, setPlayerClickDisplay] = useState(0);\n  const [disableButtons, setDisableButtons] = useState(true);\n  const [rulesVisible, setRulesVisible] = useState(false);\n  const [gameBoardVisible, setGameBoardVisible] = useState(true);\n  const [disableScoreBoard, setDisableScoreBoard] = useState(false);\n\n  const colorKey = {\n    0 : setRedActive,\n    1 : setYellowActive,\n    2 : setGreenActive,\n    3 : setBlueActive\n  }\n\n  const startGame = () => {\n    randomNumArray = generate10randomNumbers();\n    roundCount = 0;\n    playerResponse = [];\n    playerClickCounter = 0;\n    setPlayerClickDisplay(0);\n    setMyOrYours('MY');\n    setTurnText('TURN!');\n    nextRound();\n    setDisableScoreBoard(true);\n  }\n\n  const onViewRulesClick = () => {\n    if (!rulesVisible) {\n      setRulesVisible(true)\n      setGameBoardVisible(false)\n    } else {\n      setRulesVisible(false)\n      setGameBoardVisible(true)\n    }\n  }\n\n  const validateAnswer = () => {\n    let correctSoFar = true;\n    for (let i = 0; i < playerResponse.length; i++) {\n      if (playerResponse[i] !== randomNumArray[i] && correctSoFar) {\n        correctSoFar = false;\n      }\n    }\n    if (correctSoFar) {\n      onCorrectRoundGuess();\n    } else {\n      gameOver();\n    }\n  }\n\n  const gameOver = () => {\n    setMyOrYours('GAME');\n    setTurnText('OVER!');\n    setDisableButtons(true);\n    setDisableScoreBoard(false);\n  }\n\n  const onCorrectRoundGuess = () => {\n    setMyOrYours('RIGHT!');\n    setTurnText('');\n    setDisableButtons(true);\n    setDisableScoreBoard(true);\n    playerResponse = [];\n    setTimeout(() => {\n      nextRound();\n    }, 1000)\n  }\n\n  const nextRound = () => {\n    if (roundCount === 10) {\n      displayWinningMessage();\n    } else {\n      roundCount++\n      playerClickCounter = 0\n      setPlayerClickDisplay(0);\n      setMyOrYours('MY');\n      setTurnText('TURN!');\n      j = 0;\n      for (let i = 1; i <= (roundCount * 2); i++) {\n        makeColorFlash(i);\n      }\n    }\n  }\n\n  const displayWinningMessage = () => {\n    setMyOrYours('YOU');\n    setTurnText('WIN!');\n    setDisableButtons(true);\n  }\n\n  const makeColorFlash = i => {\n    setTimeout(() => {\n      if (i % 2) {\n        colorKey[randomNumArray[Math.floor(j)]](true)\n      } else {\n        colorKey[randomNumArray[Math.floor(j)]](false)\n      }\n      j += 0.5\n      if (i === (roundCount * 2)) {\n        setMyOrYours('YOUR');\n        setDisableButtons(false);\n        setDisableScoreBoard(false);\n      }\n    }, i * 800 );\n  }\n\n  const generate10randomNumbers = () => {\n    let randomArray = [];\n    for (let i = 0; i < 10; i++) {\n      randomArray.push(Math.floor(Math.random() * 4))\n    }\n    return randomArray;\n  }\n\n  const handlePlayerResponse = colorNum => {\n    playerResponse.push(colorNum);\n    playerClickCounter++\n    setPlayerClickDisplay(playerClickDisplay + 1);\n    if (roundCount === playerClickCounter) {\n      validateAnswer();\n    }\n  }\n\n  return (\n    <section>\n      <ScoreBoard roundCount={roundCount} startGame={startGame} disableScoreBoard={disableScoreBoard} playerClickDisplay={playerClickDisplay} randomNumArray={randomNumArray} onViewRulesClick={onViewRulesClick} rulesVisible={rulesVisible}/>\n      <div className={ rulesVisible ? 'rules-outer-container' : 'hidden' }>\n        <div className='rules-inner-container'>\n          <p className='rules-text'>\n          It's you against Mr. Simon. When the game starts, Simon will create a color\n          pattern that grows with each round. Your challenge is to match Simon's pattern\n          by selecting the glowing lights in the correct order. Finish round 10 to win!\n          </p>\n        </div>\n      </div>\n      <div className={ gameBoardVisible ? 'gameboard-outer-container' : 'hidden' }>\n        <div className='center-circle'>\n          <p className='turn-text-1'>{myOrYours}</p>\n          <p className='turn-text-2'>{turnText}</p>\n        </div>\n        <div className={ disableButtons ? 'top-section disabled' : 'top-section' }>\n          <button aria-label='red button' onClick={() => handlePlayerResponse(0)} className={ redActive ? 'red-box red-active' : 'red-box' }></button>\n          <button aria-label='yellow button' onClick={() => handlePlayerResponse(1)} className={ yellowActive ? 'yellow-box yellow-active' : 'yellow-box' }></button>\n        </div>\n        <div className={ disableButtons ? 'bottom-section disabled' : 'bottom-section' }>\n          <button aria-label='green button' onClick={() => handlePlayerResponse(2)} className={ greenActive ? 'green-box green-active' : 'green-box' }></button>\n          <button aria-label='blue button' onClick={() => handlePlayerResponse(3)} className={ blueActive ? 'blue-box blue-active' : 'blue-box' }></button>\n        </div>\n      </div>\n    </section>\n  );\n\n}\n","import React from 'react';\nimport './ScoreBoard.css';\n\nexport const ScoreBoard = props => {\n\n  return (\n    <div className=\"scoreboard-outer-container\">\n      <div className='round-moves-container'>\n        <h3 className='round-display'>ROUND: {props.roundCount}</h3>\n        <h3 className='round-display'>MOVES: {props.playerClickDisplay}/{props.roundCount}</h3>\n      </div>\n      <div className={props.disableScoreBoard ? 'disabled score-board-button-container' : 'score-board-button-container'}>\n        <button aria-label='start game' onClick={props.startGame} className='game-button'>{props.randomNumArray.length !== 0 ? 'NEW GAME' : 'START GAME'}</button>\n        <button aria-label='toggle view rules' onClick={props.onViewRulesClick} className='game-button'>{props.rulesVisible ? 'HIDE RULES' : 'VIEW RULES'}</button>\n      </div>\n    </div>\n  );\n\n}\n","import React, { useEffect } from 'react';\nimport { GameBoard } from './Components/GameBoard/GameBoard';\nimport './App.css';\n\nconst App = () => {\n\n  useEffect(() => {\n    document.addEventListener('touchstart', () => {}, false);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1 className='game-title-text'>Mr. Simon</h1>\n      <GameBoard />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}